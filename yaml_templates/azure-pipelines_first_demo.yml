# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# Variable 'ml.experimentName' was defined in the Variables tab
# Variable Group 'IRISBuildVG' was defined in the Variables tab

#Global (TODO: Define Variables in variable group)
variables:
- name: ml.computeIdleSecs
  value: 350
- name: ml.computeMaxNodes
  value: 2
- name: ml.computeMinNodes
  value: 0
- name: ml.computeName
  value: icompute
- name: ml.computeVMSize
  value: Standard_D8ds_v4
- name: ml.region
  value: eastus
- name: ml.resourceGroup
  value: SyntbotsAI-RnD-MLOps
- name: ml.workspace
  value: MLOps_WS01
- name: ml.experimentName
  value: APIPipelineRun
- name: system.debug
  value: true





#CI Stage
jobs:
- job: Job_1
  displayName: MLOpsAgent
  cancelTimeoutInMinutes: 60
  pool:
    name: MLOpsAgent
    vmImage: ubuntu-18.04
  steps:
  - checkout: self

  # - task: UsePythonVersion@0
  #   displayName: Use Python 3.x
  #   inputs:
  #     #addToPath: true
  #     #architecture: 'x64'
  #     #versionSpec: '3.x'



  - task: Bash@3
    displayName: Install Python Dependencies
    inputs:
      filePath: environment_setup/install-requirements.sh

  - task: AzureCLI@2
    displayName: Azure CLI ML Installation
    inputs:
      connectedServiceNameARM: 7e03a668-298d-4fab-bb8d-49cccb324797
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: az extension add -n azure-cli-ml

  - task: AzureCLI@2
    displayName: Create/Use Workspace
    inputs:
      connectedServiceNameARM: 7e03a668-298d-4fab-bb8d-49cccb324797
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: az ml workspace create -g $(ml.resourceGroup) -w $(ml.workspace)
        -l $(ml.region) --exist-ok --yes

  - task: AzureCLI@2
    displayName: Create/Use Compute Target
    inputs:
      connectedServiceNameARM: 7e03a668-298d-4fab-bb8d-49cccb324797
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: az ml computetarget create amlcompute -g $(ml.resourceGroup) -w
        $(ml.workspace) -n $(ml.computeName) -s $(ml.computeVMSize) --min-nodes $(ml.computeMinNodes)
        --max-nodes $(ml.computeMaxNodes) --idle-seconds-before-scaledown $(ml.computeIdleSecs)
        --location $(ml.region)

  # - task: AzureCLI@2
  #   displayName: Upload Data to Azure Blob
  #   inputs:
  #     connectedServiceNameARM: 7e03a668-298d-4fab-bb8d-49cccb324797
  #     scriptType: bash
  #     scriptLocation: inlineScript
  #     inlineScript: az ml datastore upload -w $(ml.workspace) -g $(ml.resourceGroup) -n $(az ml datastore show-default -w $(ml.workspace) -g $(ml.resourceGroup) --query name -o tsv) -p data -u irisdata

  - task: Bash@3
    displayName: Create Metadata/Model/Artifcats Folders
    inputs:
      targetType: inline
      script: mkdir metadata && mkdir models

  - task: AzureCLI@2
    displayName: Training Stage
    timeoutInMinutes: 60
    inputs:
      connectedServiceNameARM: 7e03a668-298d-4fab-bb8d-49cccb324797
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: az ml run submit-script -g $(ml.resourceGroup) -w $(ml.workspace)
        -e $(ml.experimentName) --ct $(ml.computeName) -c iris_training --source-directory
        . --path environment_setup -t ./metadata/run.json iris_training.py --container_name
        irisdata --input_csv Iris.csv --model_path ./models/iris_model.pkl --artifact_loc
        ./output/models/ --dataset_name iris_ds --dataset_desc "IRIS_Data_Set"
      addSpnToEnvironment: true
      useGlobalConfig: true

  - task: AzureCLI@2
    displayName: Register Model in Model Registry
    inputs:
      connectedServiceNameARM: 7e03a668-298d-4fab-bb8d-49cccb324797
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: az ml model register -g $(ml.resourceGroup) -w $(ml.workspace)
        -n IRIS --asset-path output/models/ -d "IRIS_Decision_Tree_Classifier" --tag
        "model"="Decision Tree" --model-framework Custom -f ./metadata/run.json -t
        metadata/model.json

  - task: CopyFiles@2
    displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
    inputs:
      SourceFolder: $(Build.SourcesDirectory)
      Contents: >-
        **metadata/*

        **/environment_setup/*

        **/deployment/*

        **/inference/*

        **/tests/smoke/*

        **/outputs/prediction.csv
      TargetFolder: $(Build.ArtifactStagingDirectory)

  - task: PublishPipelineArtifact@1
    displayName: Publish Pipeline Artifact
    inputs:
      artifactName: IRISClassifierArtifacts


